openapi: 3.0.3
info:
  title: Gomoku API
  description: Web-based system that allows multiple players to play the Battleship game
  version: 0.1.0
servers:
  - url: http://localhost:8888
    description: Local server

tags:
  - name: Home
    description: Home page

  - name: Users
    description: Operations about users

  - name: Games
    description: Operations about games

paths:
  /api/:
    get:
      tags:
        - Home
      summary: Home page
      operationId: getHome
      responses:
        200:
          description: OK
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/ServerInfo'
        500:
          $ref: '#/components/responses/InternalServerError'

  /api/users/create:
    post:
      tags:
        - Users
      summary: Create a new user
      operationId: create
      requestBody:
        description: User data Information
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreateInputModel'
      responses:
        201:
          description: CREATED
          headers:
            Location:
              schema:
                type: integer
              description: UserId
        400:
          $ref: '#/components/responses/BadRequest'
        409:
          $ref: '#/components/responses/Conflict'
        500:
          $ref: '#/components/responses/InternalServerError'

  /api/users/logout:
    post:
      tags:
        - Users
      summary: Logs a user out
      operationId: logout
      responses:
        200:
          description: OK
        500:
          $ref: '#/components/responses/InternalServerError'

  /api/users/me:
    get:
      tags:
        - Users
      summary: Gets user home page
      operationId: home
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserHomeOutputModel'
        500:
          $ref: '#/components/responses/InternalServerError'

  /api/users/ranking/{ruleId}:
    get:
      tags:
        - Users
      summary: Gets the ranking of the users for a given rule
      operationId: searchRanking
      parameters:
        - $ref: '#/components/parameters/ruleIdParam'
        - $ref : '#/components/parameters/usernameParam'
        - $ref: '#/components/parameters/offsetParam'
        - $ref: '#/components/parameters/limitParam'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref : '#/components/schemas/GetUsersDataOutputModel'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'

  /api/users/ranking/{userId}/{ruleId}:
    get:
      tags:
        - Users
      summary: Gets the ranking of a user for a given rule
      operationId: userRanking
      parameters:
        - $ref: '#/components/parameters/userIdParam'
        - $ref: '#/components/parameters/ruleIdParam'
      responses:
        200:
          description: OK
          content:
            'application/json':
              schema:
                allOf:
                  - $ref: '#/components/schemas/UserRuleStatsOutputModel'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'

  /api/users/stats/{userId}:
    get:
      tags:
        - Users
      summary: Gets the whole stats of a user
      operationId: userStats
      parameters:
        - $ref: '#/components/parameters/userIdParam'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserStatsOutputModel'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'

  /api/users/token:
    post:
      tags:
        - Users
      summary: Creates a token for a user
      operationId: token
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreateTokenInputModel'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserTokenCreateOutputModel'
        400:
          $ref: '#/components/responses/BadRequest'
        500:
          $ref: '#/components/responses/InternalServerError'

  /api/users/{id}:
    get:
      tags:
        - Users
      summary: Gets the user with the given id
      operationId: getById
      parameters:
        - $ref: '#/components/parameters/userIdParam'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'

  /api/game/:
    get:
      tags:
        - Games
      summary: Get Finished games
      operationId: finishedGames
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref : '#/components/schemas/MatchOutputModel' # TODO
        500:
          $ref: '#/components/responses/InternalServerError'

  /api/game/rules:
    get:
      tags:
        - Games
      summary: Get the available rules
      operationId: rules
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref : '#/components/schemas/GetRulesOutputModel'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'

  /api/game/{id}:
    get:
      tags:
        - Games
      summary: Get the details of a game
      operationId: gameDetails
      parameters:
        - name: 'id'
          in: 'path'
          required: true
          schema:
            type: integer
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MatchOutputModel'

        500:
          $ref: '#/components/responses/InternalServerError'
  /api/game/{id}/play:
    post:
      tags:
        - Games
      summary: POST api/game/{id}/play
      operationId: makePlay
      parameters:
        - name: 'id'
          in: 'path'
          required: true
          schema:
            type: integer
        - name: 'pos'
          in: 'query'
          required: true
          schema:
            type: integer
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
        500:
          $ref: '#/components/responses/InternalServerError'
  /api/game/{id}/turn:
    get:
      tags:
        - Games
      summary: GET api/game/{id}/turn
      operationId: currentTurnPlayerId
      parameters:
        - name: 'id'
          in: 'path'
          required: true
          schema:
            type: integer
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
        500:
          $ref: '#/components/responses/InternalServerError'
  /api/game/{lobbyId}/leave:
    post:
      tags:
        - Games
      summary: POST api/game/{lobbyId}/leave
      operationId: leaveLobby
      parameters:
        - name: 'lobbyId'
          in: 'path'
          required: true
          schema:
            type: integer
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
        500:
          $ref: '#/components/responses/InternalServerError'
  /api/game/{rulesId}:
    post:
      tags:
        - Games
      summary: POST api/game/{rulesId}
      operationId: startMatchmaking
      parameters:
        - name: 'rulesId'
          in: 'path'
          required: true
          schema:
            type: integer
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
        500:
          $ref: '#/components/responses/InternalServerError'
components:
  schemas:
    Socials:
      type: object
      properties:
        name:
          type: string
          example: 'github'
        url:
          type: string
          example: 'https://github.com'
    Author:
      type: object
      properties:
        studentID:
          type: integer
          example: 12345
        name:
          type: string
          example: 'John Doe'
        email:
          type: string
          example: 'john@doe.org'
        socials:
          type: array
          items:
            $ref: '#/components/schemas/Socials'
    ServerInfo:
      type: object
      properties:
        version:
          type: string
          example: 0.1.0
        authors:
          type: array
          items:
            $ref: '#/components/schemas/Author'
    UserTokenCreateOutputModel:
      type: object
      properties:
        token:
          type: string
    UserCreateInputModel:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
    UserHomeOutputModel:
      type: object
      properties:
        id:
          type: integer
        username:
          type: string
    RuleStatsOutputModel:
      type: object
      properties:
        ruleId:
          type: integer
        gamesPlayed:
          type: integer
        elo:
          type: integer
    UserStatsOutputModel:
      type: object
      properties:
        userId:
          type: integer
        username:
          type: string
        userRulesOutputModel:
          type: array
          items:
            $ref: '#/components/schemas/RuleStatsOutputModel'
    UserCreateTokenInputModel:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
    UserRuleStatsOutputModel:
      type: object
      properties:
        id:
          type: integer
        username:
          type: string
        ruleId:
          type: integer
        gamesPlayed:
          type: integer
        elo:
          type: integer
    GetUsersDataOutputModel:
      type: object
      properties:
        userData:
          type: array
          items:
            $ref: '#/components/schemas/GetUsersDataOutputModel'
    ErrorModel:
      type: object
      properties:
        type:
          type: string
#        title:
#          type: string
#        timestamp:
#          type: string
#        status:
#          type: integer
#        error:
#          type: string
#        path:
#          type: string

  parameters:
    offsetParam:
      name: offset
      in: query
      description: The offset to start from
      required: false
      schema:
        type: integer

    limitParam:
      name: limit
      in: query
      description: The number of items to return
      required: false
      schema:
        type: integer

    gameIdParam:
      name: gameId
      in: path
      description: The id of the game
      required: true
      schema:
        type: integer
        example: 1

    usernameParam:
      name: username
      in: path
      description: The username of the user
      required: true
      schema:
        type: string
        example: 'bob'

    userIdParam:
      name: userId
      in: path
      description: The id of the user
      required: true
      schema:
        type: integer
        example: 1

    ruleIdParam:
      name: ruleId
      in: path
      description: The id of the rule
      required: true
      schema:
        type: integer
        example: 1

  responses:
    InternalServerError:
      description: Internal Server Error
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ErrorModel'

    Conflict:
      description: Conflict
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ErrorModel'

    NotFound:
      description: Not Found
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ErrorModel'

    BadRequest:
      description: Bad Request
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ErrorModel'

    Unauthorized:
      description: Unauthorized
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ErrorModel'

    Forbidden:
      description: Forbidden
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ErrorModel'

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT